{"name":"Szort","tagline":"An easy to use multi-core aware command line sort utility","body":"# szort\r\nAn easy to use multi-core aware command line sort utility\r\n\r\n# rationale\r\n\r\nSorting numbers is awesome. Heck, that's the main thing computers are\r\ngood for, sorting and searching. You know the ol' unix 'sort' utility\r\nonly uses one core. I decided that was silly. szort will sort using N-1\r\nof your cores!\r\n\r\n# benchmark\r\n\r\nWe start with a file with a bunch of random numbers in it. How many?\r\n```\r\neduardos-mbp-5:szort earino$ wc -l random.txt\r\n 11000000 random.txt\r\n```\r\nWell, how about 11 million?\r\n\r\nHere we sort using the standard unix sort\r\n```\r\neduardos-mbp-5:szort earino$ time sort -n random.txt > /dev/null\r\n\r\nreal    0m45.790s\r\nuser    0m45.488s\r\nsys     0m0.272s\r\n```\r\n45 seconds to sort 11 million numbers? That's pretty cool, but using szort?\r\n```\r\neduardos-mbp-5:szort earino$ time ./szort random.txt > /dev/null\r\n\r\nreal    0m31.290s\r\nuser    1m5.375s\r\nsys     0m13.672s\r\n```\r\n31 seconds! We cut nearly 1/3 of the total time! Kinda magic if you ask\r\nme.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}